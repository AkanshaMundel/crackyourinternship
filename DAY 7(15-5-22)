 Longest Common Prefix
 
code:
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int n= strs.size();
         string s ;
        int min  =1000;
        int count =0;
        int flag = 0;
        
        for (int i= 0;i<strs.size();i++){
            int len ;
            len = strs[i].length();
            if(len<min){   //checking the min string nd storig the len
                min = len ;
                 s = strs[i];
            } 
        }
        
        for(int i = 0 ; i<min;i++){
            for (int j = 0;j<n;j++){
                if(strs[j][i] != s[i]) //as they arranged in formof matrix so moving doen first 
                    flag =1;
            }   
            if(flag ==1) break;
            count++ ;   
            }
            if(count == 0) return "";
            else
                return s.substr(0,count);
                
        
    } 
};
// stop cretria :
// end string if one of them
// have one differ element
// method1 make count increment & intrate no of sting nd check individual same or not 
//     tc:(o(noof string *length of shortest  string)) sc: O(1)
// method2 trie making structure 
// there a root make node of string 0n1 nd mak eword count one nd now frm 2nd string if already present then increse word count nd last longest leng == n that is no of string if its == 3 return ..



---------------------------------------------------------------------------------------------------------------------------------------------------------------------


Q Valid Palindrome II
code:
class Solution {
public:
    bool validPalindrome(string s) {
        int n = s.size();
        int i=0, j=n-1, count1=0, count2=0;
        while(i<j){
            if(s[i] != s[j])
                return isPalindrome(s, i+1, j) || isPalindrome(s, i, j-1);
            i++; j--;
        }
        return true;
    }
    bool isPalindrome(string s, int i, int j){
        while(i<j){
            if(s[i] != s[j]) 
                return false;
            i++; j--;
        }
        return true;
    }
};
// tc:o(n);
 // approach two popinter: we cheching left with right char if same we increase i ndj--,if not seme two //choice either i++ or j-- at one time so callinf fun to check again pallidrome ..
 
 
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 
 Q Integer to Roman
 
 code:
 class Solution {
public:
    string intToRoman(int nums) {
        string s ="";
        while(nums>=1000){
            s = s+"M";
            nums = nums-1000;
        }
        if (nums>=900 ){
            s +="CM";
            nums = nums-900;
        }
         while(nums>=500){
            s +="D";
            nums = nums - 500;
        }
          if(nums>=400){
            s +="CD";
            nums = nums - 400;
        }
        while(nums>=100){
            s = s+"C";
            nums = nums-100;
        }
        if (nums>=90 ){
            s +="XC";
            nums = nums-90;
        }
            while(nums>=50){
            s = s+"L";
            nums = nums-50;
        }
        if (nums>=40 ){
            s +="XL";
            nums = nums-40;
        }
            while(nums>=10){
            s = s+"X";
            nums = nums-10;
        }
        if (nums==9 ){
            s +="IX";
            nums = nums-9;
        }
            while(nums>=5){
            s = s+"V";
            nums = nums-5;
        }
        if (nums==4){
            s +="IV";
            nums = nums-4;
        }
         while(nums>=1){
            s = s+"I";
            nums = nums-1;
        }
        return s;
       
    }
};



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Q .Generate Parentheses
code:
class Solution {
public:
    vector<string >ans;
    void fun(string s,int score,int n){
        if(score <0 )return ;
        if((int)s.size()>(2*n))
            return;
        if(score==0 && (int)s.size()==(2*n)) // base condition 
            ans.push_back(s);
        fun(s+"(",score+1,n);
         fun(s+")",score-1,n);  //backtracking 
        return; 
        
        
        
        
    }
    vector<string> generateParenthesis(int n) {
      string s="";
        fun(s,0,n);
        return ans ;
    }
};
