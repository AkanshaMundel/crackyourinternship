15.  Merge Sorted Array
code:
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       int p1 = m-1 ,p2 =n-1 ,k=m+n-1;
        while(p2>=0 ) {
            if(p1>=0 && (nums1[p1]>nums2[p2])){
                nums1[k]= nums1[p1];
                p1--;k--;
            }
            else {
                nums1[k]= nums2[p2];
                p2--;k--;
            }
        }
      
    }
};
// approach :1st app: copying element of num 2into 1 nd sort tc:o(nlogn)
// 2nd two pointer starting from last element of num1 comparing nd placing 
// tc: o(k) k =m+n
// sc :o(1)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------


16. Maximum Points You Can Obtain from Cards
code:
class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {   //we taking window of element other than k element 
        int n =cardPoints.size();
        
       int tsum = 0; int i =0 ,c=0;  int j ;
        int wsum =0; int ans =0;
        for (int i:cardPoints){      //total sum of cardpoints 
            tsum +=i;
        }
        for(j= 0 ;c<n-k;j++,c++){
            wsum += cardPoints[j];      //calculating the element of window 
         
        }
       ans = max (ans,tsum-wsum);
        while(j<n){                     //just j is inside our window 
            wsum -= cardPoints[i++];      //removing left part from window
            wsum += cardPoints[j++];      //adding right element in window 
             ans = max (ans,tsum-wsum);
        }
        return ans;
       
    }
};
tc:o(k)
sc: o(1)
approach sliding window 

also another way of writing code 


class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {   //we taking window of element other than k element 
      int n = cardPoints.size();
        int l =0; int r =n-k;
        int total = 0;
        for(int i= r; i<n;i++){
            total +=cardPoints[i];
        }
        int res;
        res =total;
        while(r<n){
            total += cardPoints[l] -cardPoints[r];
            res = max(res,total);
            l++;
            r++;
         
        }
        return res;
    }
};
// this is manuplating the sum of k th element that is if we move right we add left value in total(sum //of k element )and subtrct right element because its include in our window 


------------------------------------------------------------------------------------------------------------------------------------------------------------------


17.  Subarray Sum Equals K
code:
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
     unordered_map<int ,int> mp;
        int cursum = 0;
        int cont = 0;
        for(int i = 0;i<nums.size();i++){
            cursum +=nums[i];             // travesing array nd find currsum
            if(cursum ==k)                //if find desire output thrn increase the count
                cont++;
            if(mp.find(cursum-k)!= mp.end())  // Find
                                            // number of subarrays having this sum 
               
                
                cont += (mp[cursum-k]);    //exclude those subarrays from currsum by increasing count
                                                     // by same amount.
                  cout<<cont;
            mp[cursum]++ ;             //  Add currsum value to count of different values of k
        
        }
        return cont;
        
        
    }
};
tc: o(n)
approach hash table to store presum +count 


-----------------------------------------------------------------------------------------------------------------------------------------------------------------

18.Spiral Matrix
code:
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int n = matrix.size();   //row size
        int m = matrix[0].size();//colm size
        
        int left=0,right=m-1,bottom=n-1,top=0;
        int direction=1;
        vector<int> v;
        while(left<=right && top<=bottom)
        {
            if(direction==1)
            {
                for(int i=left;i<=right;i++) v.push_back(matrix[top][i]);
                direction=2;
                top++;
            }
            
            else if(direction==2)
            {
                for(int i=top;i<=bottom;i++) v.push_back(matrix[i][right]);
                direction=3;
                right--;
            }
            
            else if(direction==3)
            {
                for(int i=right;i>=left;i--) v.push_back(matrix[bottom][i]);
                direction=4;
                bottom--;
            }
            
            else if(direction==4)
            {
                for(int i=bottom;i>=top;i--) v.push_back(matrix[i][left]);
                direction=1;
                left++;
            }
        }
        return v;
    }
};
tc: (n+m)
sc(1)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

19.Word Search
code:
class Solution {
public:
   bool exist(vector<vector<char>> &board, string word) {
       // checking for all positions
       for(int i = 0 ; i < board.size() ; ++i)
           for(int j = 0 ; j < board[0].size() ; ++j)
               if(dfs(0 , i , j , board , word))
                   return true;
       return false;
   }
   bool dfs(int index , int x , int y , vector<vector<char>> &board , string &word)
   {
       if(index == word.size()) // word exists in matrix
           return true;
       
       if(x < 0 or y < 0 or x >= board.size() or y >= board[0].size() or board[x][y] == '.') // boundary check + visited check
           return false;
       
       if(board[x][y] != word[index])
           return false;
       
       char temp = board[x][y];
       board[x][y] = '.'; // marking it visited
       
       // Move in 4 directions[UP , DOWN , LEFT , RIGHT]
       if(dfs(index + 1 , x - 1 , y , board , word) or dfs(index + 1 , x + 1 , y , board , word) or dfs(index + 1 , x , y - 1 , board , word) or dfs(index + 1 , x , y + 1 , board , word))
           return true;
           
       board[x][y] = temp; // backtrack step
       return false;
                                              
}
};
tc( O(mn)
Space Complexity:O((word_length)^2)
